What happens when you initialize a repository? Why do you need to do it?

The initialize process creates a .git folder that contains the information necessary for Git to work with your directory. This is necessary because Git requires a .git folder.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

	The staging area is different from the working directory by being files added directly by the user that can be moved into a repository. The staging area includes files that can be brought into the repository. It adds the value of being able to be only put updated files into a directory and making commits potentially smaller as opposed to always adding the entire working directory with every new commit.

How can you use the staging area to make sure you have one commit per logical
change?

	You can use the staging area to put files that you suspect only has 1 logical change overall and you can use the git diff command to confirm that there is only 1 logical change going into a different commit.
	
What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

	Branches would help in case I needed to make different versions of an application that would need to be released. Instead of generating several git repositories for every version, I can instead use branches to generate these different versions.

How do the diagrams help you visualize the branch structure?

	It helps by allowing you to look at each of the separate commits along with whatever their previous parent commit was. It helps to show that each commit can have multiple parents.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

	The result of merging the two branches together is a singular commit that has the added content from both branches together. It's represented the way that Udacity does it because the merged commit is technically parented by both of the branches.

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?

	Pro: you don't have to worry about keeping track of many different branches that could have many different features.
	Pro: This process can be done quickly as opposed to taking a long time to do manual merging.
	Con: New bugs can be potentially introduced by doing these merges.
	Con: Code may not be reflective of the users who programmed it.