When would you want to use a remote repository rather than keeping all your work
local?

    You would want a remote repository in case you need to leave anywhere, but you still need to work on code. Additionally, it would be handy to be able to take the code and be able to show it to people without having to lug around the local machine that has all your work.
    
Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?

    Sometimes things in the remote repository might be experimental changes that are not necessarily meant for the full project. In case something is drastically changed about the remote repository, it is a good idea to be able to go back to the project with a pull rather than having to try and "fix" what went wrong with the remote.

Describe the differences between forks, clones, and branches.  When would you
use one instead of another?

    A branch is simply a different section of commits within a single repository. 
	Clones are entire repositories that are copied directly into a local machine.
	Forks are entire repositories that are cloned to a different repository that points to the original owner.
	
What is the benefit of having a copy of the last known state of the remote
stored locally?

	The major benefit is in case the local copy ends up with major errors that were not visible in the previous commit(s). You would not want to commit the branch if this is the case. Thus you can just reverse the changes that had occurred with the branch.

How would you collaborate without using Git or GitHub?  What would be easier,
and what would be harder?

	Collaboration would likely be done via something like Dropbox or by transferring/emailing files back and forth between people. This would easier by ensuring that there is always a master copy within a local machine, but it would also be harder because of the amount of meetups in person that would need to occur to transfer the new files back into the old ones. Also the master would have to be manually edited instead of being simply merged as with VCS.

When would you want to make changes in a separate branch rather than directly in
master?  What benefits does each approach have?

    When you want to do experimental changes or add a new feature that you are not quite sure whether or not it deserves a spot in your application. The benefits of separate branches is that there is a clear label/purpose to what the commits in the separate branch are trying to do. Making everything directly in master on the other hand has the benefit of being sent out right away after initial testing rather than having to do pull requests and making sure conflicts are not occuring within the file.